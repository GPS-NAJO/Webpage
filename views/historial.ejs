<!DOCTYPE html>
<html>
  <head>
    <title>Historial de rutas</title>
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
      integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
      crossorigin=""
    />
    <script
      src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
      integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
      crossorigin=""
    ></script>
    <script
      type="text/javascript"
      src="https://cdn.jsdelivr.net/jquery/latest/jquery.min.js"
    ></script>
    <script
      type="text/javascript"
      src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"
    ></script>
    <script
      type="text/javascript"
      src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"
    ></script>
    <link
      rel="stylesheet"
      type="text/css"
      href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css"
    />
    <link
      rel="stylesheet"
      type="text/css"
      href="/stylesheets/styles.css"
      media="screen"
    />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.7.0/nouislider.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/15.7.0/nouislider.min.js"></script>

  </head>
  <body>
    <div id="nav"></div>
    <script>
      var nav = L.map("nav").setView([51.505, -0.09], 13);
      L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
        maxZoom: 19,
        attribution:
          '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
      }).addTo(nav);
    </script>
    <section>
      <div class="Input-container">
          <input type="text" name="datetimes" />
          <script>
            $(function () {
              $('input[name="datetimes"]').daterangepicker({
                timePicker: true,
                timePicker24Hour: true,
                timePickerIncrement: 5,
                locale: {
                  format: "YYYY/MM/DD HH:mm:ss",
                },
                minDate: "2023/03/06 09:00:00",
                maxDate: new Date(),
                startDate: moment().startOf("hour"),
                endDate: moment().startOf("hour").add(32, "hour"),
              });
            });
          </script>
        <input type="button" value="Send" id="sendBtn" />
        <button id="returnToHome">Regresar</button>
        <script>
          document.getElementById("returnToHome").addEventListener("click", () => {
            window.location.href = "/";
          });
        </script>
        <div id="slider"></div>
        <script>
          let datos = [];
          let circle;
          $(function () {
            $("#sendBtn").click(function () {
              console.log("endTime:", $('input[name="datetimes"]').data("daterangepicker").endDate.format("YYYY/MM/DD HH:mm:ss"));
              $.ajax({
                url: "/api/historicos",
                data: {
                  startTime: $('input[name="datetimes"]')
                    .data("daterangepicker")
                    .startDate.format("YYYY/MM/DD HH:mm:ss"),
                  endTime: $('input[name="datetimes"]')
                    .data("daterangepicker")
                    .endDate.format("YYYY/MM/DD HH:mm:ss"),
                },
                success: function (data) {
                  let coordenadas = [];
                  datos = data;
                  let coord = [];
                  for (var i=0; i<data.length ; i++) {
                    coord = [data[i].latitud, data[i].longitud];
                    coordenadas.push(coord);
                  }

                  // Get a reference to the previously drawn polyline and marker, if they exist
                  const previousPolyline = nav.previousPolyline;
                  const previousMarker = nav.previousMarker;

                  // Remove the previously drawn polyline and marker from the map, if they exist
                  if (previousPolyline) {
                    previousPolyline.remove();
                  }
                  if (previousMarker) {
                    previousMarker.remove();
                  }

                  // Create the new polyline and add it to the map
                  const newPolyline = L.polyline(
                    coordenadas,
                    {
                      color: "red",
                    }
                  ).addTo(nav);
                  
                  // Set the view of the map and add a marker at the last coordinate
                  nav.setView(coord, 15);
                  const newMarker = L.marker(coordenadas[coordenadas.length - 1]).addTo(nav);
                  
                  // Store the new polyline and marker in properties of the map object
                  nav.previousPolyline = newPolyline;
                  nav.previousMarker = newMarker;
                },
              });
            });
          });
          
          var stepSlider = document.getElementById('slider');

          noUiSlider.create(stepSlider, {
                  start: [0],
                  step: 1,
                  range: {
                      'min': [0],
                      'max': [10]
                  }
              });

          function puntoDentroRadio(coordenada,centro,radio){
            return (coordenada.latitud - centro.lat) **2 + (coordenada.longitud - centro.lng) ** 2 <= radio **2;
          }
          function onClickMapa(e){
            const zoomLevel = nav.getZoom(); // get the current zoom level of the map
            const radio = 0.002 * Math.pow(2, 22 - zoomLevel); // calculate the radius based on the zoom level

            const PuntoCentral = e.latlng;
            const radio_latitud = radio / 110.574
            if (circle) {
              circle.remove();
            }
            circle = L.circle(PuntoCentral, {
                  color: '#4c007d',
                  fillColor: '#bc4ed8',
                  fillOpacity: 0.3,
                  radius: radio_latitud * 111000
              }).addTo(nav);
            console.log(PuntoCentral);
            const puntosEncontrados = datos.filter(p => puntoDentroRadio(p,PuntoCentral,radio_latitud));
            if (puntosEncontrados.length > 0){
              
              var valuesForSlider = [];

              for (var i=0; i<puntosEncontrados.length ; i++) {
                valuesForSlider.push(i);
              }

              slider.noUiSlider.updateOptions({
                range: {
                    'min': [0],
                    'max': [puntosEncontrados.length -1]
                }
              });

              var format = {
              to: function(value) {
                  return valuesForSlider[Number(value)];
              },
              from: function (value) {
                  return valuesForSlider.indexOf(Number(value));
              }
              };
              console.log(puntosEncontrados);
              console.log(valuesForSlider);
            }else{
              //TODO 
              //popup
            }
          }
          nav.on('click', e => onClickMapa(e));
        </script>
      </div>
    </section>
  </body>
</html>
